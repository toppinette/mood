import os
import logging
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, filters,
    ContextTypes, ConversationHandler, CallbackQueryHandler
)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –®–∞–≥–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
NAME, AMOUNT, ACCOUNT, CURRENCY, CATEGORY, OTHER_ACCOUNT, OTHER_CATEGORY = range(7)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã

def build_account_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("Revolut", callback_data="Revolut")],
        [InlineKeyboardButton("BCC", callback_data="BCC")],
        [InlineKeyboardButton("Alta", callback_data="Alta")],
        [InlineKeyboardButton("–¢–∏–Ω—å–∫–æ–≤", callback_data="–¢–∏–Ω—å–∫–æ–≤")],
        [InlineKeyboardButton("–î—Ä—É–≥–æ–µ", callback_data="other_account")],
    ])

def build_currency_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("Euro", callback_data="Euro"), InlineKeyboardButton("RSD", callback_data="RSD")],
        [InlineKeyboardButton("pounds", callback_data="pounds"), InlineKeyboardButton("—Ä—É–±", callback_data="—Ä—É–±")],
        [InlineKeyboardButton("amer", callback_data="amer"), InlineKeyboardButton("tenge", callback_data="tenge")],
    ])

def build_category_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üç≤ –ï–¥–∞", callback_data="üç≤ –ï–¥–∞"), InlineKeyboardButton("ü•ê‚òïÔ∏è –ö–æ—Ñ–µ", callback_data="ü•ê‚òïÔ∏è –ö–æ—Ñ–µ")],
        [InlineKeyboardButton("üõí Grocery", callback_data="üõí Grocery"), InlineKeyboardButton("üß∫ –ë—ã—Ç–æ–≤—ã–µ", callback_data="üß∫ –ë—ã—Ç–æ–≤—ã–µ")],
        [InlineKeyboardButton("üöï –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", callback_data="üöï –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç"), InlineKeyboardButton("üè• –ó–¥–æ—Ä–æ–≤—å–µ", callback_data="üè• –ó–¥–æ—Ä–æ–≤—å–µ")],
        [InlineKeyboardButton("‚úàÔ∏è –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", callback_data="‚úàÔ∏è –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è"), InlineKeyboardButton("üíÉ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", callback_data="üíÉ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è")],
        [InlineKeyboardButton("üö∞ –ö–æ–º–º—É–Ω–∞–ª–∫–∞", callback_data="üö∞ –ö–æ–º–º—É–Ω–∞–ª–∫–∞"), InlineKeyboardButton("üéÅ –ü–æ–¥–∞—Ä–∫–∏", callback_data="üéÅ –ü–æ–¥–∞—Ä–∫–∏")],
        [InlineKeyboardButton("üíî –ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–µ", callback_data="üíî –ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–µ"), InlineKeyboardButton("üè† –ê—Ä–µ–Ω–¥–∞", callback_data="üè† –ê—Ä–µ–Ω–¥–∞")],
        [InlineKeyboardButton("üì± –ü–æ–¥–ø–∏—Å–∫–∏", callback_data="üì± –ü–æ–¥–ø–∏—Å–∫–∏"), InlineKeyboardButton("üíÑ Beauty", callback_data="üíÑ Beauty")],
        [InlineKeyboardButton("–î—Ä—É–≥–æ–µ", callback_data="other_category")],
    ])

# –•–µ–Ω–¥–ª–µ—Ä—ã

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    logger.info("User %s started conversation", update.effective_user.id)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞:")
    return NAME

async def ask_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['name'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞:")
    return AMOUNT

async def ask_amount(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        context.user_data['amount'] = float(update.message.text)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—á—ë—Ç:", reply_markup=build_account_keyboard())
        return ACCOUNT
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")
        return AMOUNT

async def ask_account(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    if query.data == 'other_account':
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å—á—ë—Ç:")
        return OTHER_ACCOUNT
    context.user_data['account'] = query.data
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É —Ä–∞—Å—Ö–æ–¥–∞:", reply_markup=build_currency_keyboard())
    return CURRENCY

async def handle_other_account(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['account'] = update.message.text
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É —Ä–∞—Å—Ö–æ–¥–∞:", reply_markup=build_currency_keyboard())
    return CURRENCY

async def ask_currency(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    context.user_data['currency'] = query.data
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=build_category_keyboard())
    return CATEGORY

async def ask_category(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    if query.data == 'other_category':
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:")
        return OTHER_CATEGORY
    context.user_data['category'] = query.data
    return await send_data(update, context)

async def handle_other_category(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['category'] = update.message.text
    return await send_data(update, context)

async def send_data(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    payload = {
        '–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞': context.user_data['name'],
        '–°—É–º–º–∞ —Ä–∞—Å—Ö–æ–¥–∞': context.user_data['amount'],
        '–°—á—ë—Ç': context.user_data['account'],
        '–≤–∞–ª—é—Ç–∞ —Ä–∞—Å—Ö–æ–¥–∞': context.user_data['currency'],
        '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': context.user_data['category']
    }
    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö: %s", payload)
    try:
        response = requests.post(
            'https://script.google.com/macros/s/AKfycbyEMTwPPvCqg4YjhjbikdIvwBo2TmePEBPYeqfBShQ9-XYlaOeuqro1bui2xjB0OfxJSg/exec',
            data=payload
        )
        logger.info(f"Response status: %s, text: %s", response.status_code, response.text)
        if response.ok:
            await update.effective_message.reply_text("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")
        else:
            await update.effective_message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö.")
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: %s", e)
        await update.effective_message.reply_text(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞

def main():
    token = os.environ.get("TELEGRAM_TOKEN") or "7826192630:AAGyqFR3BlRE_-Wi8lUtC7w8X46dWM07hw0"
    app = ApplicationBuilder().token(token).build()

    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_name)],
            AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_amount)],
            ACCOUNT: [CallbackQueryHandler(ask_account)],
            OTHER_ACCOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_other_account)],
            CURRENCY: [CallbackQueryHandler(ask_currency)],
            CATEGORY: [CallbackQueryHandler(ask_category)],
            OTHER_CATEGORY: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_other_category)],
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    app.add_handler(conv)
    app.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()

